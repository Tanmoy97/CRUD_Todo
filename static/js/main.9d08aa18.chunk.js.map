{"version":3,"sources":["component/todoProject/todo.js","App.js","index.js"],"names":["Todo","useState","inputData","setInputData","list","localStorage","getItem","console","log","JSON","parse","getLocalItmes","items","setItems","toggleSubmit","setToggleSubmit","isEditItem","setIsEditItem","addItem","map","elem","id","name","allInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","type","placeholder","value","onChange","e","target","title","onClick","newEditItem","find","editItem","index","updateditems","filter","deleteItem","data-sm-link-text","App","ReactDOM","render","document","getElementById"],"mappings":"+NAiJeA,EA7HF,WAET,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAdR,WAClB,IAAIG,EAAOC,aAAaC,QAAQ,SAGhC,OAFAC,QAAQC,IAAIJ,GAERA,EACOK,KAAKC,MAAML,aAAaC,QAAQ,UAEhC,GAOwBK,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCZ,oBAAS,GAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KACA,EAAoCd,mBAAS,MAA7C,mBAAOe,EAAP,KAAmBC,EAAnB,KAEMC,EAAU,WACZ,GAAKhB,EAEE,GAAGA,IAAcY,EACpBD,EACID,EAAMO,KAAI,SAACC,GACP,OAAIA,EAAKC,KAAOL,EACL,2BAAKI,GAAZ,IAAkBE,KAAMpB,IAErBkB,MAGVL,GAAgB,GAEhBZ,EAAa,IAEbc,EAAc,UAChB,CACH,IAAMM,EAAe,CAAEF,IAAI,IAAIG,MAAOC,UAAUC,WAAYJ,KAAKpB,GACjEW,EAAS,GAAD,mBAAKD,GAAL,CAAYW,KACpBpB,EAAa,SAlBbwB,MAAM,mBAkEd,OAJAC,qBAAU,WACPvB,aAAawB,QAAQ,QAASpB,KAAKqB,UAAUlB,MAC7C,CAACA,IAGA,mCACI,qBAAKmB,UAAU,WAAf,SACI,sBAAKA,UAAU,YAAf,UACI,iCAEI,qEAGJ,sBAAKA,UAAU,WAAf,UACI,uBAAOC,KAAK,OAAOC,YAAY,sBAC5BC,MAAOhC,EACPiC,SAAU,SAACC,GAAD,OAAOjC,EAAaiC,EAAEC,OAAOH,UAGtCpB,EAAe,mBAAGiB,UAAU,qBAAqBO,MAAM,WAAWC,QAASrB,IACtE,mBAAGa,UAAU,sBAAsBO,MAAM,cAAcC,QAASrB,OAK7E,qBAAKa,UAAU,YAAf,SAGQnB,EAAMO,KAAI,SAACC,GACP,OACI,sBAAKW,UAAU,WAAf,UACI,6BAAKX,EAAKE,OACV,sBAAKS,UAAU,WAAf,UACI,mBAAGA,UAAU,sBAAsBO,MAAM,YAAYC,QAAS,kBAtDrF,SAAClB,GACd,IAAImB,EAAc5B,EAAM6B,MAAK,SAACrB,GAC1B,OAAOA,EAAKC,KAAOA,KAEvBd,QAAQC,IAAIgC,GAEZzB,GAAgB,GAEhBZ,EAAaqC,EAAYlB,MAEzBL,EAAcI,GA4C0FqB,CAAStB,EAAKC,OAClF,mBAAGU,UAAU,2BAA2BO,MAAM,cAAcC,QAAS,kBAxE1F,SAACI,GAChB,IAAMC,EAAehC,EAAMiC,QAAO,SAACzB,GAC/B,OAAOuB,IAAUvB,EAAKC,MAG1BR,EAAS+B,GAmEsGE,CAAW1B,EAAKC,YAJpED,EAAKC,SAepD,qBAAKU,UAAU,YAAf,SACI,yBAAQA,UAAU,eAAegB,oBAAkB,aAAaR,QAnDlE,WACb1B,EAAS,KAkDM,UAAoF,gDAApF,iBC3HTmC,EATH,WACV,OACE,mCACC,cAAC,EAAD,OCFLC,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9d08aa18.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n//import todo from \"../images/todo.svg\";\r\nimport \"../todoProject/Todo.css\";\r\n//import \"../TabMenu/tab.css\";\r\n\r\n\r\n\r\n// to get the data from LS\r\n\r\nconst getLocalItmes = () => {\r\n    let list = localStorage.getItem('lists');\r\n    console.log(list);\r\n\r\n    if (list) {\r\n        return JSON.parse(localStorage.getItem('lists'));\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nconst Todo = () => {\r\n\r\n    const [inputData, setInputData] = useState('');\r\n    const [items, setItems] = useState(getLocalItmes());\r\n    const [toggleSubmit, setToggleSubmit] = useState(true);\r\n    const [isEditItem, setIsEditItem] = useState(null);\r\n\r\n    const addItem = () => {\r\n        if (!inputData) {\r\n            alert('plzz fill data');\r\n        } else if(inputData && !toggleSubmit) {\r\n            setItems(\r\n                items.map((elem) => {\r\n                    if (elem.id === isEditItem) {\r\n                        return { ...elem, name: inputData }\r\n                    }\r\n                    return elem;\r\n                })\r\n            )\r\n                 setToggleSubmit(true);\r\n\r\n                 setInputData('');\r\n\r\n                 setIsEditItem(null);\r\n        } else {\r\n            const allInputData = { id: new Date().getTime().toString(), name:inputData }\r\n            setItems([...items, allInputData]);\r\n            setInputData('')\r\n        }\r\n    }\r\n\r\n    \r\n    // delete the items\r\n    const deleteItem = (index) => {\r\n        const updateditems = items.filter((elem) => {\r\n            return index !== elem.id;\r\n        });\r\n\r\n        setItems(updateditems);\r\n    }\r\n\r\n// edit the item\r\n//     When user clikc on edit button \r\n\r\n// 1: get the id and name of the data which user clicked to edit\r\n// 2: set the toggle mode to change the submit button into edit button\r\n// 3: Now update the value of the setInput with the new updated value to edit. \r\n// 4: To pass the current element Id to new state variable for reference \r\n    \r\n    \r\n    const editItem = (id) => {\r\n        let newEditItem = items.find((elem) => {\r\n            return elem.id === id\r\n        });\r\n        console.log(newEditItem);\r\n\r\n        setToggleSubmit(false);\r\n\r\n        setInputData(newEditItem.name);\r\n\r\n        setIsEditItem(id);\r\n\r\n    }\r\n    \r\n\r\n    // remove all \r\n    const removeAll = () => {\r\n         setItems([]);\r\n    }\r\n\r\n    // add data to localStorage\r\n    useEffect(() => {\r\n       localStorage.setItem('lists', JSON.stringify(items))\r\n    }, [items]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"main-div\">\r\n                <div className=\"child-div\">\r\n                    <figure>\r\n                         \r\n                        <figcaption>Add Your List Here ✌</figcaption>\r\n                    </figure>\r\n\r\n                    <div className=\"addItems\">\r\n                        <input type=\"text\" placeholder=\"✍ Add Items...\"\r\n                           value={inputData} \r\n                           onChange={(e) => setInputData(e.target.value) }\r\n                        />\r\n                        {\r\n                            toggleSubmit ? <i className=\"fa fa-plus add-btn\" title=\"Add Item\" onClick={addItem}></i> :\r\n                                 <i className=\"far fa-edit add-btn\" title=\"Update Item\" onClick={addItem}></i>\r\n                        }\r\n                       \r\n                    </div>\r\n\r\n                    <div className=\"showItems\">\r\n                        \r\n                        {\r\n                            items.map((elem) => {\r\n                                return (\r\n                                    <div className=\"eachItem\" key={elem.id}>\r\n                                        <h3>{elem.name}</h3>\r\n                                        <div className=\"todo-btn\">\r\n                                            <i className=\"far fa-edit add-btn\" title=\"Edit Item\" onClick={() => editItem(elem.id)}></i>\r\n                                            <i className=\"far fa-trash-alt add-btn\" title=\"Delete Item\" onClick={() => deleteItem(elem.id)}></i>\r\n                                        </div>\r\n                                  </div>\r\n                                )\r\n                            })\r\n\r\n                        }\r\n                       \r\n                    </div>\r\n                \r\n                    {/* clear all button  */}\r\n                    <div className=\"showItems\">\r\n                        <button className=\"btn effect04\" data-sm-link-text=\"Remove All\" onClick={removeAll}><span> CHECK LIST </span> </button>\r\n                    </div>\r\n                </div>\r\n          </div>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n\r\n\r\n \r\n ","import React from 'react'\n// import Tabs from \"./component/TabMenu/Tabs\";\n//import GalleryReact from \"./component/TabMenu/GalleryReact\";\nimport Todo from \"./component/todoProject/todo\";\n\nconst App = () => {\n  return (\n    <>\n     <Todo />\n    \n    </>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}